#!/usr/bin/env python2

# Code originally written by Kai Mast
# Modified to be a one-file program by Robert Escriva
# Credit to the former; bugs to the latter

import argparse
import numpy
import random
import time

import hyperdex.mongo
import pymongo
import ygor.collect


SERIES_ATOMIC_ADD = 1
SERIES_DELETE = 2
SERIES_SET = 3
SERIES_PUT = 4
SERIES_DOC_SIZE = 5


def nanos():
    return int(time.time() * 1000**3)


def create_document(prefix, count):
        doc = {'_id' : prefix + str(count)}
        num_elems = numpy.random.poisson(1000)
        for i in range(num_elems):
                doc['elem' + str(i)] = i
        return doc


class DocumentBench(object):

    def __init__(self, output, args):
        micros = 1000
        millis = 1000*micros
        self.params = args
        self.dl = ygor.collect.DataLogger(output, millis, micros)

    def flush(self):
        self.dl.flush_and_destroy()

    def load(self):
        start = self.params.load_start or 0
        limit = self.params.load_limit or self.params.documents
        for x in range(start, limit):
            self.do_ins(x)

    def run(self):
        if not hasattr(self, 'do_' + self.params.operation):
            raise RuntimeError("No operation type %s" % self.params.operation)
        op = getattr(self, 'do_' + self.params.operation)
        for x in range(self.params.operations):
            docidx = random.randint(0, self.params.documents - 1)
            op(docidx)

    def do_add(self, docidx):
        start = nanos()
        self.bench.update({'_id' :  self.params.prefix + str(docidx)}, {'$inc' : {'elem50' : 10}})
        self.dl.record(SERIES_ATOMIC_ADD, start, nanos() - start)

    def do_delete(self, docidx):
        start = nanos()
        self.bench.remove({'_id' : self.params.prefix + str(docidx)})
        self.dl.record(SERIES_DELETE, start, nanos() - start)

    def do_set(self, docidx):
        start = nanos()
        self.bench.update({'_id': self.params.prefix + str(docidx)}, {'$set' : {'newelem' : 10}})
        self.dl.record(SERIES_SET, start, nanos() - start)

    def do_ins(self, docidx):
        doc = create_document(self.params.prefix, docidx)
        start = nanos()
        self.bench.save(doc)
        self.dl.record(SERIES_PUT, start, nanos() - start)

    def do_put(self, docidx):
        doc = create_document(self.params.new_prefix, docidx)
        start = nanos()
        self.bench.save(doc)
        self.dl.record(SERIES_PUT, start, nanos() - start)


class HyperDexDocumentBench(DocumentBench):

    def __init__(self, host, port, output, args):
        super(HyperDexDocumentBench, self).__init__(output, args)
        self.db = hyperdex.mongo.HyperDatabase(host, port)
        self.bench = self.db.bench


class MongoDocumentBench(DocumentBench):
    def __init__(self, host, port, output, args):
        super(MongoDocumentBench, self).__init__(output, args)
        self.db = pymongo.MongoClient(host, port)
        self.db.write_concern = {'w': 2, 'wtimeout': 100000}
        self.bench = self.db.test.bench


def main(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument('--host', type=str, default='127.0.0.1')
    parser.add_argument('--port', type=int, default=1982)
    parser.add_argument('--system', type=str, choices=('hyperdex', 'mongodb'), default='hyperdex')
    parser.add_argument('--action', type=str, choices=('load', 'run'), default='run')
    parser.add_argument('--output', type=str, default='benchmark.dat.bz2')
    parser.add_argument('--documents', type=int, default=1000000)
    parser.add_argument('--operations', type=int, default=1000000)
    parser.add_argument('--operation', type=str, choices=('put', 'set', 'add', 'delete'), default='put')
    parser.add_argument('--prefix', type=str, default='entry')
    parser.add_argument('--new-prefix', type=str, default='newentry')
    parser.add_argument('--load-start', type=int)
    parser.add_argument('--load-limit', type=int)
    args = parser.parse_args(argv[1:])
    assert(args.prefix != '')
    assert(args.new_prefix != '')
    assert(args.prefix != args.new_prefix)
    assert(args.documents > 0)
    assert(args.operations > 0)
    systems = {'hyperdex': HyperDexDocumentBench,
               'mongodb': MongoDocumentBench}
    bench = systems[args.system](args.host, args.port, args.output, args)
    if args.action == 'load':
        bench.load()
    if args.action == 'run':
        bench.run()
    bench.flush()


if __name__ == '__main__':
    import os
    import struct
    import sys
    random.seed(struct.unpack('>Q', os.urandom(8))[0])
    main(sys.argv)
    #import json
    #import scipy
    #lengths = []
    #fields = []
    #for x in range(1000):
    #    doc = create_document("entry", x)
    #    s = json.dumps(doc)
    #    lengths.append(len(s))
    #    fields.append(len(doc))
    #print scipy.mean(lengths), scipy.mean(fields)
